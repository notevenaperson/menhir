#+begin_src sh
menhir --help
#+end_src

menhir is a command-line program. menhir takes no file arguments and option flags are very few. --help prints usage information. Except, there is one other option, -h, with -h menhir deletes your $HOME.

* What is this
- A quip on the lack of standardization of what option characters should mean across the CLI userspace. Moreover, each CLI has what could be counted as an ad-hoc grammar ([[https://www.omnigroup.com/mailman/archive/macosx-talk/2002-June/066077.html][*]]) (Does argument order matter to the program on not? [[https://unix.stackexchange.com/a/590210][Does the program have position restricitions by type of argument]]? The end-of-options delimiter ~--~ , is a feature of some programs to prevent the program from confounding positional arguments for options, but the fact that [[https://dwheeler.com/essays/filenames-in-shell.html#dashdash][you don't know right away if a program supports]] ~--~ causes disuse of an otherwise good security habit; Or does the program have a custom cli grammar fitted to its function, like magick or ffmpeg?). A peek into the usage information is necessary. But we can't even agree on those. Most of the time it's ~-h~ or ~--help~. Some of the time it's -help or help or -?. The quick -h, my predilect, is almost standard, /almost/ â€” I'm a bit frustrated when ~Unrecognized option -h \n Use --help for help!~
- It also challenges the assumption that printing help is without side-effects. Packages that automatically run and parse the output of ~--help~, like [[https://github.com/RobSis/zsh-completion-generator][zsh-completion-generator]], could have catastrophic results upon encoutering one random program whose equally informal dialect assings ~-h~ or even ~--help~, an entirely different meaning.
